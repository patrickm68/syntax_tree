#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative File.expand_path("../lib/syntax_tree", __dir__)

help = <<~EOF
  stree MDOE FILE

  MODE: one of "a", "ast", "c", "check", "d", "doc", "f", "format", "w", or "write"
  FILE: one or more paths to files to parse
EOF

if ARGV.length < 2
  warn(help)
  exit(1)
end

module SyntaxTree::CLI
  class AST
    def run(filepath, source)
      pp SyntaxTree.parse(source)
    end
  end

  class Check
    def run(filepath, source)
      formatted = SyntaxTree.format(source)
      raise if formatted != SyntaxTree.format(formatted)
    end
  end

  class Doc
    def run(filepath, source)
      formatter = SyntaxTree::Formatter.new([])
      SyntaxTree.parse(source).format(formatter)
      pp formatter.groups.first
    end
  end

  class Format
    def run(filepath, source)
      puts SyntaxTree.format(source)
    end
  end

  class Write
    def run(filepath, source)
      File.write(filepath, SyntaxTree.format(source))
    end
  end
end

mode =
  case ARGV.shift
  when "a", "ast"
    SyntaxTree::CLI::AST.new
  when "c", "check"
    SyntaxTree::CLI::Check.new
  when "d", "doc"
    SyntaxTree::CLI::Doc.new
  when "f", "format"
    SyntaxTree::CLI::Format.new
  when "w", "write"
    SyntaxTree::CLI::Write.new
  else
    warn(help)
    exit(1)
  end

errored = false

ARGV.each do |pattern|
  Dir.glob(pattern).each do |filepath|
    next unless File.file?(filepath)

    begin
      encoding =
        File.open(filepath, "r") do |file|
          header = file.readline
          header += file.readline if header.start_with?("#!")
          Ripper.new(header).tap(&:parse).encoding
        end

      source = File.read(filepath, encoding: encoding)
      mode.run(filepath, source)
    rescue => error
      warn("!!! Failed on #{filepath}")
      warn(error.message)
      warn(error.backtrace)
      errored = true
    end
  end
end

exit(errored ? 1 : 0)
