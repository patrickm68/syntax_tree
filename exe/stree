#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative File.expand_path("../lib/syntax_tree", __dir__)

help = <<~EOF
  stree MDOE FILE

  MODE: one of "a", "ast", "d", "doc", "f", "format", "w", or "write"
  FILE: one or more paths to files to parse
EOF

if ARGV.length < 2
  warn(help)
  exit(1)
end

module SyntaxTree::CLI
  class AST
    def run(filepath)
      pp SyntaxTree.parse(File.read(filepath))
    end
  end

  class Doc
    def run(filepath)
      formatter = SyntaxTree::Formatter.new([])
      SyntaxTree.parse(File.read(filepath)).format(formatter)
      pp formatter.groups.first
    end
  end

  class Format
    def run(filepath)
      puts SyntaxTree.format(File.read(filepath))
    end
  end

  class Write
    def run(filepath)
      File.write(filepath, SyntaxTree.format(File.read(filepath)))
    end
  end
end

mode =
  case ARGV.shift
  when "a", "ast"
    SyntaxTree::CLI::AST.new
  when "d", "doc"
    SyntaxTree::CLI::Doc.new
  when "f", "format"
    SyntaxTree::CLI::Format.new
  when "w", "write"
    SyntaxTree::CLI::Write.new
  else
    warn(help)
    exit(1)
  end

ARGV.each do |pattern|
  Dir.glob(pattern).each do |filepath|
    begin
      mode.run(filepath) if File.file?(filepath)
    rescue => error
      warn("!!! Failed on #{filepath}")
      warn(error.message)
      warn(error.backtrace)
    end
  end
end
